{
  "hash": "18e11082002b6f95e61f4cb045e47e52",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reproducible Data Science Environments with {rix}\"\nauthor: \"Bruno Rodrigues\"\nformat:\n  revealjs:\n    embed-resources: true\n    slide-number: true\n    theme: solarized\n    incremental: true\n  pptx:\n    freeze: true\nexecute:\n  echo: true\n---\n\n\n\n\n## Intro: Who am I\n\nBruno Rodrigues, head of the statistics and data strategy departments at the Ministry of Research and Higher education in Luxembourg\n\n## Intro: Who am I\n\n![](images/luxembourg.png){fig-align=\"center\"}\n\n\n## Intro: Who am I\n\nSlides available online at [https://b-rodrigues.github.io/r-medicine-rix](https://b-rodrigues.github.io/r-medicine-rix)\n\nCode available at: [https://github.com/b-rodrigues/r-medicine-rix](https://github.com/b-rodrigues/r-medicinedrix)\n\n## Things I want to talk about\n\n-   Identify *what* must be managed for reproducibility\n-   Give a short intro to {rix} and Nix\n\n## What I mean by *reproducibility*\n\n-   Ability to recover *exactly* the same results from an analysis\n\n## Turning our analysis reproducible\n\nWe need to answer these questions\n\n. . .\n\n1. How easy would it be for someone else to rerun the analysis?\n2. How easy would it be to update the project?\n3. How easy would it be to reuse this code for another project?\n4. What guarantee do we have that the output is stable through time?\n\n## Reproducibility is on a continuum (1/2)\n\nHere are the 4 main things influencing an analysis' reproducibility:\n\n-   Version of R used\n-   Versions of packages used\n-   Operating system\n-   Hardware\n\n## Reproducibility is on a continuum (2/2)\n\n![](images/repro_spectrum.png){fig-align=\"center\"}\n\nSource: Peng, Roger D. 2011. \"Reproducible Research in Computational Science.\" Science 334 (6060): 1226--27\n\n## Recording packages with {renv} 1/2\n\nMost popular package for reproducibility, and very easy to use:\n\n- Open an R session in the folder containing the scripts\n- Run `renv::init()` and check the folder for `renv.lock`\n\n## Recording packages with {renv} 2/2\n\n- But:\n\n1. Records, but does not restore the version of R\n2. Installation of old packages can fail (due to missing OS-dependencies)\n\n## Going further with Docker: handling R and system-level dependencies\n\n- Docker is a containerisation tool that you install on your computer\n- Docker allows you to build *images* and run *containers* (a container is an instance of an image)\n- Docker images:\n    1. contain all the software and code needed for your project\n    2. are immutable (cannot be changed at run-time)\n    3. can be shared on- and offline\n\n## Docker: a panacea?\n\n- Docker is very useful and widely used\n- But the entry cost is high (familiarity with Linux is recommended)\n- Single point of failure (what happens if Docker gets bought, abandoned, etc? **quite unlikely though**)\n- Not actually dealing with reproducibility per se, we're \"abusing\" Docker in a way\n- Btw, check out the [Rocker project](https://rocker-project.org/images/versioned/r-ver.html) \n\n## The Nix package manager (1/2)\n\nPackage manager: tool to install and manage *packages*\n\nPackage: any piece of software (not just R packages)\n\nA popular package manager:\n\n. . .\n\n![Google Play Store](images/play_store.png)\n\n## The Nix package manager (2/2)\n\n- Gold standard of reproducibility: R, R packages and other dependencies must be managed\n- Nix is a package manager actually focused on reproducible builds\n- Nix deals with everything, with one single text file (called a Nix expression)!\n- These Nix expressions *always* build the exact same output\n\n## rix: reproducible development environments with Nix (1/5)\n\n- `{rix}` ([website](https://docs.ropensci.org/rix/)) makes writing Nix expression easy!\n- Simply use the provided `rix()` function:\n\n. . .\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rix)\n\nrix(date = \"2025-01-27\",\n    r_pkgs = c(\"dplyr\", \"ggplot2\"),\n    system_pkgs = NULL,\n    git_pkgs = NULL,\n    tex_pkgs = NULL,\n    ide = \"code\",\n    project_path = \".\")\n```\n:::\n\n\n\n\n## rix: reproducible development environments with Nix (2/5)\n\n- `renv.lock` files can also be used as starting points:\n\n. . . \n\n```\nlibrary(rix)\n\nrenv2nix(\n  renv_lock_path = \"path/to/original/renv_project/renv.lock\",\n  project_path = \"path/to/rix_project\",\n  override_r_ver = \"4.4.1\" # <- optional\n)\n\n```\n\n## rix: reproducible development environments with Nix (3/5)\n\n- List required R version and packages\n- Optionally: more system packages, packages hosted on Github, or LaTeX packages\n- Optionally: an IDE (Rstudio, Radian, VS Code or \"other\")\n- Work interactively in an (relavitely) isolated, project-specific and reproducible environment!\n\n## rix: reproducible development environments with Nix (4/5)\n\n- `rix::rix()` generates a `default.nix` file\n- Build expressions using `nix-build` (in terminal) or `rix::nix_build()` from R \n- \"Drop\" into the development environment using `nix-shell`\n- Expressions can be generated even without Nix installed (with some caveats)\n\n## rix: reproducible development environments with Nix (5/5)\n\n- Can install specific versions of packages (write `\"dplyr@1.0.0\"`)\n- Can install packages hosted on Github\n- Many vignettes to get you started! [See here](https://docs.ropensci.org/rix/articles/)\n\n. . .\n\nLet's check out `scripts/nix_expressions/rix_intro/`\n\n## Non-interactive use\n\n- `{rix}` makes it easy to run pipelines in the right environment\n- (Little side note: the best tool to build pipelines in R is `{targets}`)\n- See `scripts/nix_expressions/nix_targets_pipeline`\n- Can also run the pipeline like so:\n\n. . .\n\n```\ncd /absolute/path/to/pipeline/ && nix-shell default.nix --run \"Rscript -e 'targets::tar_make()'\"\n```\n\n## Nix and Github Actions: running pipelines\n\n- Possible to easily run a `{targets}` pipeline on Github actions\n- Simply run `rix::tar_nix_ga()` to generate the required files\n- Commit and push, and watch the actions run!\n- See [here](https://github.com/b-rodrigues/nix_targets_pipeline/tree/master).\n\n## Nix and Github Actions: writing papers\n\n- Easy collaboration on papers as well\n- See [here](https://github.com/b-rodrigues/rix_paper/tree/master)\n- Just focus on writing!\n\n## Conclusion\n\n- Very vast and complex topic!\n- At the very least, generate an `renv.lock` file\n- Always possible to rebuild a Docker image in the future (either you, or someone else!)\n- Consider using `{targets}`: not only good for reproducibility, but also an amazing tool all around\n- Long-term reproducibility: must use Docker or Nix (better: both!) and maintenance effort is required as well\n\n## The end\n\nContact me if you have questions:\n\n- bruno@brodrigues.co\n- Twitter: @brodriguesco\n- Mastodon: @brodriguesco@fosstodon.org\n- Blog: www.brodrigues.co\n- Book: www.raps-with-r.dev\n- rix: https://docs.ropensci.org/rix\n\n. . .\n\nThank you!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}